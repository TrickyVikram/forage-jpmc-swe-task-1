From 57cb6c4a2df27207aa7bb1e7723469a7e8865746 Mon Sep 17 00:00:00 2001
From: TrickyVikram <vkumarsah999@gmail.com>
Date: Tue, 10 Sep 2024 23:39:43 +0530
Subject: [PATCH] Fix getDataPoint and getRatio methods, and add unit tests

---
 client3.py     | 19 ++++++++++++-------
 client_test.py | 44 +++++++++++++++++++++++++++-----------------
 2 files changed, 39 insertions(+), 24 deletions(-)

diff --git a/client3.py b/client3.py
index 3fc09b7..dfb68e2 100644
--- a/client3.py
+++ b/client3.py
@@ -31,29 +31,34 @@ N = 500
 
 def getDataPoint(quote):
     """ Produce all the needed values to generate a datapoint """
-    """ ------------- Update this function ------------- """
     stock = quote['stock']
     bid_price = float(quote['top_bid']['price'])
     ask_price = float(quote['top_ask']['price'])
-    price = bid_price
+    price = (bid_price + ask_price) / 2  # Compute average price
     return stock, bid_price, ask_price, price
 
 
 def getRatio(price_a, price_b):
     """ Get ratio of price_a and price_b """
-    """ ------------- Update this function ------------- """
-    return 1
+    if price_b == 0:
+        return float('inf')  # Return infinity if price_b is zero
+    return price_a / price_b
 
 
-# Main
 if __name__ == "__main__":
     # Query the price once every N seconds.
     for _ in iter(range(N)):
         quotes = json.loads(urllib.request.urlopen(QUERY.format(random.random())).read())
 
-        """ ----------- Update to get the ratio --------------- """
+        prices = {}  # Store prices for ratio calculation
+
         for quote in quotes:
             stock, bid_price, ask_price, price = getDataPoint(quote)
+            prices[stock] = price  # Store the price of each stock
             print("Quoted %s at (bid:%s, ask:%s, price:%s)" % (stock, bid_price, ask_price, price))
 
-        print("Ratio %s" % getRatio(price, price))
+        # Compute and print the ratio if there are at least two stocks
+        if len(prices) == 2:
+            (stock_a, price_a), (stock_b, price_b) = prices.items()
+            ratio = getRatio(price_a, price_b)
+            print("Ratio %s" % ratio)
diff --git a/client_test.py b/client_test.py
index af2bf26..d81d91a 100644
--- a/client_test.py
+++ b/client_test.py
@@ -1,25 +1,35 @@
 import unittest
-from client3 import getDataPoint
+from client3 import getDataPoint, getRatio
 
 class ClientTest(unittest.TestCase):
-  def test_getDataPoint_calculatePrice(self):
-    quotes = [
-      {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-
-  def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
-    quotes = [
-      {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
-      {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
-    ]
-    """ ------------ Add the assertion below ------------ """
-
-
-  """ ------------ Add more unit tests ------------ """
+    def test_getDataPoint_calculatePrice(self):
+        quotes = [
+            {'top_ask': {'price': 121.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        expected = [
+            ('ABC', 120.48, 121.2, (120.48 + 121.2) / 2),
+            ('DEF', 117.87, 121.68, (117.87 + 121.68) / 2)
+        ]
+        for quote, exp in zip(quotes, expected):
+            self.assertEqual(getDataPoint(quote), exp)
 
+    def test_getDataPoint_calculatePriceBidGreaterThanAsk(self):
+        quotes = [
+            {'top_ask': {'price': 119.2, 'size': 36}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 120.48, 'size': 109}, 'id': '0.109974697771', 'stock': 'ABC'},
+            {'top_ask': {'price': 121.68, 'size': 4}, 'timestamp': '2019-02-11 22:06:30.572453', 'top_bid': {'price': 117.87, 'size': 81}, 'id': '0.109974697771', 'stock': 'DEF'}
+        ]
+        expected = [
+            ('ABC', 120.48, 119.2, (120.48 + 119.2) / 2),
+            ('DEF', 117.87, 121.68, (117.87 + 121.68) / 2)
+        ]
+        for quote, exp in zip(quotes, expected):
+            self.assertEqual(getDataPoint(quote), exp)
 
+    def test_getRatio(self):
+        self.assertEqual(getRatio(10, 2), 5)
+        self.assertEqual(getRatio(10, 0), float('inf'))
+        self.assertEqual(getRatio(0, 10), 0)
 
 if __name__ == '__main__':
     unittest.main()
-- 
2.45.1

